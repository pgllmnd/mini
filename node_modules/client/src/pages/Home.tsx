import { useState, useEffect, useCallback } from 'react';
import { Link, useSearchParams } from 'react-router-dom';
import api from '../lib/api';
import { useAuth } from '../hooks/useAuth';
// SearchBar moved to Navbar - removed from Home body

interface Question {
  id: number;
  title: string;
  content: string;
  tags: string[];
  author_username: string;
  created_at: string;
  answer_count: number;
  upvotes: number;
  downvotes: number;
}

function Home() {
  const { user } = useAuth();
  const [searchParams] = useSearchParams();
  const [questions, setQuestions] = useState<Question[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [sortBy, setSortBy] = useState<'newest' | 'votes' | 'answers'>('newest');

  const loadQuestions = useCallback(async (query?: string) => {
    try {
      setLoading(true);
  const { data } = await api.get('/questions', {
        params: {
          q: query,
          sort: sortBy,
        },
      });
      // Ensure each question has a tags array, even if empty
      const questionsWithTags = data.map((question: Question) => ({
        ...question,
        tags: question.tags || [],
      }));
      setQuestions(questionsWithTags);
      setError('');
    } catch (error) {
      console.error('Failed to load questions:', error);
      setError('Failed to load questions. Please try again later.');
      // Set empty questions array on error
      setQuestions([]);
    } finally {
      setLoading(false);
    }
  }, [sortBy]);

  useEffect(() => {
    const query = searchParams.get('q') || '';
    loadQuestions(query);
  }, [searchParams, sortBy, loadQuestions]);

  // Search moved to Navbar; Home listens to URL params to load questions.

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-[400px]">
        <div className="text-xl text-gray-600">Loading...</div>
      </div>
    );
  }

  return (
    <div className="max-w-5xl mx-auto p-4 space-y-6">
     

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          {error}
        </div>
      )}

      <div className="flex justify-between items-center">
        <div className="flex items-center gap-3">
          <div className="px-3 py-1 rounded-full text-sm font-medium" style={{ backgroundColor: 'var(--surface)', color: 'var(--text-primary)' }}>
            {questions.length} {questions.length === 1 ? 'question' : 'questions'}
          </div>
          <div className="text-sm text-[var(--text-secondary)]">Showing results</div>
        </div>

        <div>
          <select
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value as 'newest' | 'votes' | 'answers')}
            className="px-3 py-1 rounded-md text-sm shadow-sm"
            style={{ border: '1px solid rgba(0,0,0,0.04)', background: 'white' }}
          >
            <option value="newest">Newest</option>
            <option value="votes">Most Votes</option>
            <option value="answers">Most Answers</option>
          </select>
        </div>
      </div>

  <div className="space-y-4">
        {questions.map((question) => (
          <div
            key={question.id}
    className="card group"
          >
            <div>
              <Link
                to={`/questions/${question.id}`}
        className="inline-block text-xl font-semibold mb-2"
              >
                {question.title}
              </Link>
              
      <p className="mt-2 text-sm text-[var(--text-secondary)] line-clamp-2">{question.content}</p>
            </div>
            
            <div className="mt-4 flex flex-wrap items-center gap-4">
        <div className="flex items-center space-x-2 text-sm text-[var(--text-secondary)]">
                <span>{question.upvotes - question.downvotes} votes</span>
                <span>•</span>
                <span>{question.answer_count} answers</span>
                <span>•</span>
                <Link
                  to={`/users/${question.author_username}`}
          className="hover:underline"
                >
                  {question.author_username}
                </Link>
                <span>•</span>
                <span>{new Date(question.created_at).toLocaleDateString()}</span>
              </div>
              
              <div className="flex flex-wrap gap-2">
                {question.tags.map((tag) => (
                  <Link
                    key={tag}
                    to={`/questions?tag=${tag}`}
                    className={`tag-badge small ${tag.length > 8 ? 'gray' : 'blue'}`}
                  >
                    {tag}
                  </Link>
                ))}
              </div>
            </div>
          </div>
        ))}

        {questions.length === 0 && !error && (
          <div className="text-center py-8 text-gray-500">
            No questions found. {user ? (
              <Link to="/questions/ask" className="text-blue-500 hover:text-blue-700">
                Ask the first question!
              </Link>
            ) : (
              <Link to="/login" className="text-blue-500 hover:text-blue-700">
                Log in to ask a question
              </Link>
            )}
          </div>
        )}
      </div>
    </div>
  );
}

export default Home;
