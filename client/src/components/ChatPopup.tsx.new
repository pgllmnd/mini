import { useState, useRef, useEffect } from 'react';
import axios from 'axios';

interface ChatPopupProps {
  isOpen: boolean;
  onClose: () => void;
}

export default function ChatPopup({ isOpen, onClose }: ChatPopupProps) {
  const [messages, setMessages] = useState<{ role: 'user'|'bot'; text: string }[]>([]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const chatRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (isOpen) {
      inputRef.current?.focus();
      // Auto scroll to bottom when messages change
      if (chatRef.current) {
        chatRef.current.scrollTop = chatRef.current.scrollHeight;
      }
    }
  }, [isOpen, messages]);

  const send = async () => {
    if (!input.trim()) return;
    const text = input.trim();
    setMessages(prev => [...prev, { role: 'user', text }]);
    setInput('');
    setLoading(true);

    try {
      const token = localStorage.getItem('token');
      const { data } = await axios.post('http://localhost:5000/api/chat', { message: text }, {
        headers: token ? { Authorization: `Bearer ${token}` } : undefined
      });

      const reply = data?.reply || 'No reply';
      setMessages(prev => [...prev, { role: 'bot', text: String(reply) }]);
    } catch (err) {
      setMessages(prev => [...prev, { role: 'bot', text: 'Error contacting chat service' }]);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="relative">
      {/* Chat popup */}
      <div 
        className={`
          fixed left-[164px] bottom-0
          w-[380px] 
          h-[420px] 
          shadow-lg flex flex-col 
          rounded-t-lg
          z-[9999]
          transition-all duration-300 ease-in-out transform
          ${isOpen 
            ? 'opacity-100 translate-y-0' 
            : 'opacity-0 translate-y-full pointer-events-none'
          }
        `}
        style={{ 
          backgroundColor: 'var(--card)',
          border: '1px solid var(--border)',
          color: 'var(--text-primary)',
          boxShadow: '0 -4px 12px rgba(0,0,0,0.05)'
        }}
      >
        {/* Header avec titre */}
        <div className="flex justify-between items-center px-4 py-3 border-b" 
          style={{ borderColor: 'var(--border)' }}
        >
          <div className="flex items-center gap-2">
            <span className="material-symbols-rounded text-xl" 
              style={{ color: 'var(--primary)' }}
            >
              forum
            </span>
            <h3 className="text-sm font-medium">Assistant IA</h3>
          </div>
          <button 
            onClick={onClose}
            className="w-7 h-7 rounded-full flex items-center justify-center transition-colors hover:bg-black/5 dark:hover:bg-white/5"
            style={{ color: 'var(--text-secondary)' }}
          >
            <span className="material-symbols-rounded text-sm">close</span>
          </button>
        </div>

        {/* Messages */}
        <div 
          ref={chatRef}
          className="flex-1 overflow-y-auto px-4 py-4 space-y-3"
          style={{ backgroundColor: 'var(--card)' }}
        >
          {messages.length === 0 && (
            <div className="flex items-center justify-center h-full">
              <div className="text-center" style={{ color: 'var(--text-secondary)' }}>
                <span className="material-symbols-rounded text-3xl mb-2">chat_bubble</span>
                <p className="text-sm">Posez une question à l'assistant</p>
              </div>
            </div>
          )}
          {messages.map((message, index) => (
            <div 
              key={`${message.role}-${index}-${message.text.substring(0, 10)}`}
              className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              {message.role === 'bot' && (
                <div className="w-6 h-6 rounded-full flex items-center justify-center mr-2"
                  style={{ backgroundColor: 'var(--surface)' }}
                >
                  <span className="material-symbols-rounded text-sm"
                    style={{ color: 'var(--primary)' }}
                  >
                    smart_toy
                  </span>
                </div>
              )}
              <div 
                className={`max-w-[85%] px-3 py-2 text-sm rounded-lg`}
                style={
                  message.role === 'user'
                    ? { backgroundColor: 'var(--primary)', color: 'white' }
                    : { backgroundColor: 'var(--surface)', color: 'var(--text-primary)' }
                }
              >
                {message.text}
              </div>
            </div>
          ))}
          {loading && (
            <div className="flex items-start">
              <div className="w-6 h-6 rounded-full flex items-center justify-center mr-2"
                style={{ backgroundColor: 'var(--surface)' }}
              >
                <span className="material-symbols-rounded text-sm"
                  style={{ color: 'var(--primary)' }}
                >
                  smart_toy
                </span>
              </div>
              <div className="px-3 py-2 rounded-lg text-sm animate-pulse"
                style={{ backgroundColor: 'var(--surface)', color: 'var(--text-secondary)' }}
              >
                ● ● ●
              </div>
            </div>
          )}
        </div>

        {/* Input */}
        <div className="px-4 py-3 border-t"
          style={{ 
            borderColor: 'var(--border)',
            backgroundColor: 'var(--card)'
          }}
        >
          <div className="flex gap-2 items-center">
            <input
              ref={inputRef}
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && !e.shiftKey && send()}
              placeholder="Votre question..."
              className="flex-1 px-3 py-2 text-sm rounded-full transition-shadow duration-200"
              style={{ 
                backgroundColor: 'var(--surface)',
                color: 'var(--text-primary)',
                border: '1px solid var(--border)'
              }}
            />
            <button
              onClick={send}
              disabled={loading}
              className="w-8 h-8 rounded-full flex items-center justify-center disabled:opacity-50 transition-transform active:scale-95"
              style={{ backgroundColor: 'var(--primary)' }}
            >
              <span className="material-symbols-rounded text-base text-white">
                {loading ? 'more_horiz' : 'send'}
              </span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
