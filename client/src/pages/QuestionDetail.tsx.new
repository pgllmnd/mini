import { useState, useEffect, useCallback } from 'react';
import { useParams, Link } from 'react-router-dom';
import api from '../lib/api';
import ReactMarkdown from 'react-markdown';
import { useAuth } from '../hooks/useAuth';
import { CommentSection } from '../components/CommentSection';
import { UserCard } from '../components/UserCard';
import { VoteButtons } from '../components/VoteButtons';

interface Answer {
  id: number;
  content: string;
  author_username: string;
  created_at: string;
  // Optional fields returned by newer API DTOs
  createdAtIso?: string;
  createdAt?: string;
  is_accepted: boolean;
  upvotes: number;
  downvotes: number;
}

interface Question {
  id: number;
  title: string;
  content: string;
  tags: string[];
  author_username: string;
  created_at: string;
  upvotes: number;
  downvotes: number;
  answers: Answer[];
}

function QuestionDetail() {
  const { id } = useParams<{ id: string }>();
  const [question, setQuestion] = useState<Question | null>(null);
  const [newAnswer, setNewAnswer] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(true);
  const { user } = useAuth();

  type MaybeAxiosError = { response?: { data?: { message?: string } } };

  const loadQuestion = useCallback(async () => {
    try {
      setLoading(true);
      const { data } = await api.get(`/questions/${id}`);
      setQuestion(data);
    } catch (error) {
      console.error('Failed to load question:', error);
      // Try to show server-provided message when available
      const serverMessage = (error as MaybeAxiosError).response?.data?.message;
      setError(serverMessage || 'Failed to load question');
    } finally {
      setLoading(false);
    }
  }, [id]);

  useEffect(() => {
    loadQuestion();
  }, [loadQuestion]);

  const handleVote = async (voteType: 'up' | 'down', targetType: 'question' | 'answer', targetId: number) => {
    if (!user) {
      setError('Please login to vote');
      return;
    }

    try {
      await api.post(`/questions/${id}/vote`, {
        voteType,
        targetType,
        targetId,
      });
      loadQuestion();
    } catch (error) {
      console.error('Failed to vote:', error);
      setError('Failed to vote');
    }
  };

  const handleAnswer = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user) {
      setError('Please login to answer');
      return;
    }

    try {
      await api.post(`/questions/${id}/answers`, {
        content: newAnswer,
      });
      setNewAnswer('');
      loadQuestion();
    } catch (error) {
      console.error('Failed to post answer:', error);
      setError('Failed to post answer');
    }
  };

  const handleAcceptAnswer = async (answerId: number) => {
    try {
      await api.patch(`/questions/${id}/answers/${answerId}/accept`);
      loadQuestion();
    } catch (error) {
      console.error('Failed to accept answer:', error);
      setError('Failed to accept answer');
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-[400px]">
        <div className="text-xl text-[var(--text-secondary)]">Loading...</div>
      </div>
    );
  }

  if (!question) {
    return (
      <div className="text-center text-red-600 dark:text-red-400">Question not found</div>
    );
  }

  return (
    <div className="max-w-3xl mx-auto pb-8">
      {error && (
        <div className="px-4 py-3 mb-4 rounded bg-red-50 border border-red-200 text-red-800 dark:bg-red-900/20 dark:border-red-800/30 dark:text-red-400">
          {error}
        </div>
      )}

      {/* Question Section */}
      <div className="p-6 rounded-lg shadow-sm bg-[var(--card)] border border-[var(--border)]">
        <h1 className="text-2xl font-bold mb-6 text-[var(--text-primary)]">{question.title}</h1>
        
        <div className="flex items-start space-x-6">
          <VoteButtons
            upvotes={question.upvotes}
            downvotes={question.downvotes}
            onUpvote={() => handleVote('up', 'question', question.id)}
            onDownvote={() => handleVote('down', 'question', question.id)}
          />
          
          <div className="flex-1 space-y-6">
            <div className="prose prose-sm md:prose-base max-w-none text-[var(--text-primary)]">
              <ReactMarkdown>{question.content}</ReactMarkdown>
            </div>

            <div className="flex flex-wrap gap-2">
              {question.tags.map((tag) => (
                <Link
                  key={tag}
                  to={`/tags/${tag}`}
                  className="px-2 py-1 text-xs font-medium rounded-full bg-[var(--surface)] text-[var(--primary)] hover:bg-opacity-80 transition-colors"
                >
                  {tag}
                </Link>
              ))}
            </div>
            
            <div className="flex justify-end pt-4 border-t border-[var(--border)]">
              <UserCard
                username={question.author_username}
                timestamp={question.created_at}
                size="medium"
              />
            </div>
          </div>
        </div>
      </div>

      {/* Answers Section */}
      <div className="mt-8">
        <h2 className="text-xl font-bold mb-4 text-[var(--text-primary)]">
          {question.answers.length} {question.answers.length === 1 ? 'Answer' : 'Answers'}
        </h2>

        <div className="space-y-6">
          {question.answers.map((answer) => (
            <div 
              key={answer.id} 
              className={`p-6 rounded-lg transition-all ${
                answer.is_accepted 
                  ? 'bg-green-50 dark:bg-green-900/10 border-2 border-green-500/30' 
                  : 'bg-[var(--card)] border border-[var(--border)]'
              }`}
            >
              <div className="flex items-start space-x-4">
                <VoteButtons
                  upvotes={answer.upvotes}
                  downvotes={answer.downvotes}
                  onUpvote={() => handleVote('up', 'answer', answer.id)}
                  onDownvote={() => handleVote('down', 'answer', answer.id)}
                  isAccepted={answer.is_accepted}
                />
                
                <div className="flex-1 space-y-6">
                  <div className="prose prose-sm md:prose-base max-w-none text-[var(--text-primary)]">
                    <ReactMarkdown>{answer.content}</ReactMarkdown>
                  </div>
                  
                  <div className="flex items-center justify-between pt-4 border-t border-[var(--border)]">
                    <UserCard
                      username={answer.author_username}
                      timestamp={answer.created_at}
                      size="small"
                    />
                    
                    {user && 
                     question.author_username === user.username && 
                     !answer.is_accepted && (
                      <button
                        onClick={() => handleAcceptAnswer(answer.id)}
                        className="flex items-center gap-1 px-3 py-1.5 text-sm font-medium text-green-600 dark:text-green-400 hover:bg-green-50 dark:hover:bg-green-900/20 rounded-full transition-colors"
                      >
                        <span className="material-symbols-outlined text-sm">check_circle</span>
                        Accept
                      </button>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Answer Form Section */}
      {user ? (
        <div className="mt-8 p-6 rounded-lg bg-[var(--card)] border border-[var(--border)]">
          <h3 className="text-xl font-bold mb-4 text-[var(--text-primary)]">Your Answer</h3>
          <form onSubmit={handleAnswer}>
            <div className="mb-4">
              <textarea
                value={newAnswer}
                onChange={(e) => setNewAnswer(e.target.value)}
                className="w-full min-h-[200px] p-4 rounded bg-[var(--surface)] text-[var(--text-primary)] border border-[var(--border)] focus:outline-none focus:ring-2 focus:ring-[var(--primary)] transition-shadow"
                placeholder="Write your answer here..."
                required
              />
            </div>
            <button 
              type="submit" 
              className="px-4 py-2 bg-[var(--primary)] text-white rounded-lg hover:opacity-90 transition-opacity font-medium text-sm"
            >
              Post Your Answer
            </button>
          </form>
        </div>
      ) : (
        <div className="mt-8 p-6 text-center rounded-lg bg-[var(--card)] border border-[var(--border)]">
          <p className="text-[var(--text-primary)]">
            Please <Link to="/login" className="text-[var(--primary)] hover:opacity-80">log in</Link> or{' '}
            <Link to="/register" className="text-[var(--primary)] hover:opacity-80">register</Link> to answer this question.
          </p>
        </div>
      )}
    </div>
  );
}

export default QuestionDetail;
