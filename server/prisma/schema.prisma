generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  username   String     @unique
  email      String     @unique
  password   String
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  reputation Int        @default(0)
  avatar_url String?    @map("avatar_url")
  bio       String? 
  answers    Answer[]
  comments   Comment[]
  questions  Question[]
  votes      Vote[]

  @@map("users")
}

model Question {
  id        String    @id @default(cuid())
  title     String
  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  authorId  String    @map("author_id")
  views     Int       @default(0)
  answers   Answer[]
  comments  Comment[]
  author    User      @relation(fields: [authorId], references: [id])
  votes     Vote[]
  tags      Tag[]     @relation("QuestionToTag")

  @@map("questions")
}

model Answer {
  id         String    @id @default(cuid())
  content    String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  authorId   String    @map("author_id")
  questionId String    @map("question_id")
  isAccepted Boolean   @default(false) @map("is_accepted")
  author     User      @relation(fields: [authorId], references: [id])
  question   Question  @relation(fields: [questionId], references: [id])
  comments   Comment[]
  votes      Vote[]

  @@map("answers")
}

model Tag {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  questions   Question[] @relation("QuestionToTag")

  @@map("tags")
}

model Vote {
  id         String    @id @default(cuid())
  type       VoteType
  userId     String    @map("user_id")
  questionId String?   @map("question_id")
  answerId   String?   @map("answer_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  answer     Answer?   @relation(fields: [answerId], references: [id])
  question   Question? @relation(fields: [questionId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@unique([userId, questionId, answerId])
  @@map("votes")
}

model Comment {
  id         String    @id @default(cuid())
  content    String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  authorId   String    @map("author_id")
  answerId   String?   @map("answer_id")
  questionId String?   @map("question_id")
  answer     Answer?   @relation(fields: [answerId], references: [id])
  author     User      @relation(fields: [authorId], references: [id])
  question   Question? @relation(fields: [questionId], references: [id])

  @@map("comments")
}

enum VoteType {
  UP
  DOWN
}
